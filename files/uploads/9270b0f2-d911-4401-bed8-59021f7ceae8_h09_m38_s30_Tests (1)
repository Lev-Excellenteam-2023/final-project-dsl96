{"topic": "Tests (1)", "slides": ["Tests, Mocks and refactoring code", "Tests", "Why do we test?", "Table test", "Elevator tests", "Tests  - When do we encounter them\nAny new feature \u2013 we write tests\nAny code change \u2013 we make the tests pass\nLocal example\nAlmost every pull request contains test changes\nhttps://github.com/pallets/flask/pull/4560/files#diff-6dac16e531fedf499195fee037bf7dffefe2dfe778c153f96d6c782e3657031b", "How much tests is too many?\nUnit tests\nIn an ideal world, a single unit test has only one thing that can cause it to fail, and that one thing can only cause\u00a0that\u00a0test to fail.\nNever the actual case\nTesting each path of the code\n", "Good test coverage - importance\nOnly way to ensure big code is working\nWhat is a good test coverage?\nhttps://www.youtube.com/watch?v=6LhslWDXg10\nhttps://www.youtube.com/watch?v=NmIB2tfshyY", "Setting up the environment\nMay involve more then code setup\nVms\\dockers\nDatabases\nOther components\nMocks", "Using tests in pycharm\nExample", "Testable code\nTestable code\nhttps://www.youtube.com/watch?v=2b2-WPzWl6c\nHow much tests is too much\nhttps://www.youtube.com/watch?v=6LhslWDXg10", "TDD\nTDD stands for Test-Driven Development, which is a software development methodology that emphasizes writing tests before writing the actual code. The process typically involves the following steps:\nWrite a test: The developer writes a test that defines the behavior they want to implement in the code.\nRun the test: The test is run, and it should fail because the behavior has not yet been implemented in the code.\nWrite the code: The developer writes the code necessary to make the test pass.\nRun the test: The test is run again, and it should pass this time.\nRefactor the code: The developer may refactor the code to improve its design or readability, while still ensuring that the test passes.", "Assertions\nAssertions are statements in your code that assert or verify that certain conditions are true at specific points in your program. They are commonly used in testing to ensure that code is working as expected, by checking that certain conditions or assumptions hold true during program execution.", "Mocks\nMock Objects: These are objects that simulate the behavior of real objects in your code. They can be created using the unittest.mock module in Python.\nPatching: This is the process of replacing real objects in your code with mock objects during tests. This can be done using the patch function from the unittest.mock module.\nAssertions: These are statements in your test code that verify that certain conditions are met during tests. They can be used to ensure that your code is behaving as expected.", "Monkey patching\nThe dynamic replacement of attributes at runtime.\nPython classes are mutable, and methods are just attributes of the class, you can do this as much as you like\nReplacing classes and functions in a module As well\nhttps://stackoverflow.com/questions/5626193/what-is-monkey-patching\nMonkeypatching is often used for bug fixes or prototyping software, especially when using external APIs or libraries.\nhttps://stackoverflow.com/questions/41701226/what-is-the-difference-between-mocking-and-monkey-patching", "Tests in other languages\nTesting in different languages is related\nhttps://semaphoreci.com/community/tutorials/stubbing-and-mocking-with-mockito-2-and-junit\nhttps://chromium.googlesource.com/external/github.com/google/googletest/+/refs/tags/release-1.8.0/googlemock/docs/ForDummies.md", "mocks\nPython mocks are objects that simulate the behavior of real objects in your code during tests. They can be used to isolate the code you are testing from dependencies, allowing you to test specific parts of your code in isolation.", "Refactoring", "Refactoring code\nThe process of improving the design and structure of existing code without changing its behavior.\n", "Refactoring code"]}